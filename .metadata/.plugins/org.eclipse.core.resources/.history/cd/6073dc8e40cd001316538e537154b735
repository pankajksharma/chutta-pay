package com.example.chuttapay;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.Toast;

public class RegistrationFragment extends Fragment
{
	private String m_name, m_email, m_mobile, m_json = null;
	private String m_filePath = null;
	private static final int FILE_SELECT_CODE = 11;
	private static final int PICK_IMAGE = 21;
	private static final int TAKE_PIC = 22;
	private static final int VOICE_REGISTRATION = 31;
	private Bitmap m_bitmap;

	private static final String LOG_TAG = "RegFragment";

	@Override
	public View onCreateView( LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState )
	{
		final String fields[] = new String[3];
		final View rootView = inflater.inflate( R.layout.fragment_registration, container, false );
		final Spinner spinner = (Spinner) rootView.findViewById( R.id.spn_profilemethod );
		final ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource( getActivity(),
				R.array.profile_options, android.R.layout.simple_spinner_item );
		adapter.setDropDownViewResource( android.R.layout.simple_spinner_dropdown_item );
		spinner.setAdapter( adapter );
		spinner.setSelection( 0 );
		(new ListView( getActivity() )).setAdapter( adapter );
		( (Button) rootView.findViewById( R.id.btn_submit ) ).setOnClickListener( new OnClickListener()
		{

			@Override
			public void onClick( View v )
			{
				fields[0] = m_name = ( (EditText) rootView.findViewById( R.id.et_name ) ).getText().toString();
				fields[1] = m_email = ( (EditText) rootView.findViewById( R.id.et_email ) ).getText().toString();
				fields[2] = m_mobile = ( (EditText) rootView.findViewById( R.id.et_mobileno ) ).getText().toString();

				for( final String field : fields )
				{
					if( field == null || field.isEmpty() )
					{
						Toast.makeText( getActivity(), "Please fill in all the fields", Toast.LENGTH_SHORT ).show();
						return;
					}
				}

				switch( spinner.getSelectedItemPosition() )
				{
				case 0:
					// Social TODO
					Intent intent = getActivity().getPackageManager().getLaunchIntentForPackage("co.autumn.android");
					if( intent != null )
						startActivity(intent);
					break;
				case 1:
					// PDF
					showFileChooser();
					break;
				case 2:
					// TODO show warning about call rates
					beginUpload( new RegistrationListener()
					{
						@Override
						public void onUploadFinished( final boolean registrationSuccessful )
						{
							getActivity().runOnUiThread( new Runnable()
							{
								@Override
								public void run()
								{
									if( !registrationSuccessful )
										return;
									try
									{
										Intent callIntent = new Intent( Intent.ACTION_CALL );
										callIntent.setData( Uri.parse( "tel:+911130715373" ) );
										startActivity( callIntent );
									}
									catch( ActivityNotFoundException e )
									{
										e.printStackTrace();
									}
								}
							} );
						}
					} );
					break;

				case 3:
					// resume Pic Export
					AlertDialog.Builder b = new AlertDialog.Builder( getActivity() );
					b.setTitle( "Pick a source" )
							.setSingleChoiceItems( new String[] { "Camera", "Gallery" }, 0,
									new DialogInterface.OnClickListener()
									{
										@Override
										public void onClick( DialogInterface dialog, int which )
										{
											Intent intent = new Intent();
											switch( which )
											{
											case 0:
												// camera
												intent.setAction( MediaStore.ACTION_IMAGE_CAPTURE );
												startActivityForResult( intent, TAKE_PIC );
												break;
											case 1:
												// gallery
												try
												{
													intent.setType( "image/*" );
													intent.setAction( Intent.ACTION_GET_CONTENT );
													startActivityForResult(
															Intent.createChooser( intent, "Select Picture" ),
															PICK_IMAGE );
												}
												catch( Exception e )
												{
													e.printStackTrace();
												}
												break;
											}
											dialog.dismiss();
										}
									} ).show();
					break;
				case 4:
					Intent newIntent = new Intent(getActivity(), VoiceRegisteration.class);
					startActivityForResult( newIntent, VOICE_REGISTRATION );
					break;
				}
			}
		} );
		return rootView;
	}

	private void showFileChooser()
	{
		// file picker code from:
		// ANMLINK[1]
		// http://stackoverflow.com/questions/7856959/android-file-chooser
		Intent intent = new Intent( Intent.ACTION_GET_CONTENT );
		intent.setType( "*/*" );
		intent.addCategory( Intent.CATEGORY_OPENABLE );

		try
		{
			startActivityForResult( Intent.createChooser( intent, "Select a File to Upload" ), FILE_SELECT_CODE );
		}
		catch( android.content.ActivityNotFoundException ex )
		{
			// Potentially direct the user to the Market with a Dialog
			Toast.makeText( getActivity(), "Please install a File Manager.", Toast.LENGTH_SHORT ).show();
		}
	}

	@Override
	public void onActivityResult( int requestCode, int resultCode, Intent data )
	{
		Log.v( LOG_TAG, "In on acitivyt reslt, rc: " + resultCode );
		m_filePath = null;
		if( resultCode != Activity.RESULT_OK )
			return;

		switch( requestCode )
		{
		case FILE_SELECT_CODE: // ANMLINK[1]
			// Get the Uri of the selected file
			Uri uri = data.getData();
			Log.d( LOG_TAG, "File Uri: " + uri.toString() );
			// Get the path
			if( "content".equalsIgnoreCase( uri.getScheme() ) )
			{
				String[] projection = { "_data" };
				Cursor cursor = null;
				try
				{
					cursor = getActivity().getContentResolver().query( uri, projection, null, null, null );
					int column_index = cursor.getColumnIndexOrThrow( "_data" );
					if( cursor.moveToFirst() )
					{
						m_filePath = cursor.getString( column_index );
					}
				}
				catch( Exception e )
				{
					// Eat it
				}
			}
			else if( "file".equalsIgnoreCase( uri.getScheme() ) )
			{
				m_filePath = uri.getPath();
			}

			Log.v( LOG_TAG, "File Path: " + m_filePath );
			if( m_filePath == null || m_filePath.isEmpty() )
			{
				Toast.makeText( getActivity(), "Please select a file!", Toast.LENGTH_LONG ).show();
				return;
			}
			break;

		case TAKE_PIC:
		{
			InputStream stream = null;
			File sdDirectory = Environment.getExternalStoragePublicDirectory( Environment.DIRECTORY_PICTURES );
			File tempImageDir = new File( sdDirectory, "Shine.com" );
			if( !tempImageDir.exists() && !tempImageDir.mkdirs() )
			{
				Log.e( LOG_TAG, "Couldn't create directory to save images!" );
				return;
			}

			SimpleDateFormat dateFormat = new SimpleDateFormat( "yyyymmddhhmmss" );
			String date = dateFormat.format( new Date() );
			String photoFile = "Resume_" + date + ".jpg";
			String filePath = tempImageDir.getPath() + File.separator + photoFile;

			try
			{
				if( m_bitmap != null )
					m_bitmap.recycle();
				if( data.getData() == null )
					return; // TODO
				stream = getActivity().getContentResolver().openInputStream( data.getData() );

				m_bitmap = BitmapFactory.decodeStream( stream );
				File imageFile = new File( filePath );

				try
				{
					final FileOutputStream fos = new FileOutputStream( imageFile );
					final BufferedOutputStream bos = new BufferedOutputStream( fos, 1024 );
					m_bitmap.compress( CompressFormat.PNG, /** quality **/
					60, bos ); // TODO quality ok for character recog?
					bos.flush();
					m_filePath = filePath;
					bos.close();
					fos.close(); // TODO needed? BOS closes the "target" stream
				}
				catch( IOException e )
				{
					e.printStackTrace();
				}

			}
			catch( FileNotFoundException e )
			{
				e.printStackTrace();
			}
			finally
			{
				if( stream != null )
				{
					try
					{
						stream.close();
					}
					catch( IOException e )
					{
						e.printStackTrace();
					}
				}
			}
			break;
		}

		case PICK_IMAGE:
		{
			// http://stackoverflow.com/questions/11049270/select-image-from-gallery-and-save-it-for-future-use
			Uri selectedImageUri = data.getData();
			try
			{
				// OI FILE Manager
				String filemanagerstring = selectedImageUri.getPath();
				// MEDIA GALLERY
				String selectedImagePath = null;
				String[] projection = { MediaStore.Images.Media.DATA };
				Cursor cursor = getActivity().managedQuery( selectedImageUri, projection, null, null, null );
				if( cursor != null )
				{
					int column_index = cursor.getColumnIndexOrThrow( MediaStore.Images.Media.DATA );
					cursor.moveToFirst();
					selectedImagePath = cursor.getString( column_index );
				}

				if( selectedImagePath != null )
				{
					m_filePath = selectedImagePath;
				}
				else if( filemanagerstring != null )
				{
					m_filePath = filemanagerstring;
				}
				else
				{
					Toast.makeText( getActivity(), "Unknown path", Toast.LENGTH_LONG ).show();
					Log.e( "Bitmap", "Unknown path" );
				}
			}
			catch( Exception e )
			{
				Toast.makeText( getActivity(), "Internal error", Toast.LENGTH_LONG ).show();
				Log.e( e.getClass().getName(), e.getMessage(), e );
			}
			break;
		}
		case VOICE_REGISTRATION:
			m_json = data.getStringExtra( "json" );
			beginUpload( null );
			break;

		}
		if( m_filePath != null )
		{
			Log.v( LOG_TAG, "In activityResult, filepath:" + m_filePath );
			beginUpload( null );
		}
		else
			Log.e( LOG_TAG, "Null path!" );

	}

	private void beginUpload( final RegistrationListener listener )
	{
		final ProgressDialog pd = new ProgressDialog( getActivity() );
		pd.setTitle( "Registering..." );
		pd.setCancelable( false );
		pd.show();
		Thread t = new Thread( new Runnable()
		{
			@Override
			public void run()
			{
				boolean successful = false;
				HttpClient httpclient = new DefaultHttpClient();
				HttpPost httppost = new HttpPost( "http://107.161.27.22:5000/api/upload" );
				try
				{
					MultipartEntityBuilder builder = MultipartEntityBuilder.create();
					builder.addTextBody( "name", m_name );
					builder.addTextBody( "email", m_email );
					builder.addTextBody( "mobile", m_mobile );
					if( m_json != null )
					{
						File file = new File( "/sdcard/shinetempjson.txt" );
						PrintWriter pw = new PrintWriter( file );
						pw.write( m_json );
						pw.close();
						builder.addPart( "file", new FileBody( file ) );
						Log.v( LOG_TAG, "Json:" + m_json );
					}
					else if( m_filePath != null )
					{
						File pdfFile = new File( m_filePath );
						Log.v( LOG_TAG, "Adding file: " + m_filePath + "File exists: " + pdfFile.exists() );
						builder.addPart( "file", new FileBody( pdfFile ) );
					}
					else
						Log.v( LOG_TAG, "File path and json null" );

					httppost.setEntity( builder.build() );
					HttpResponse response = httpclient.execute( httppost );
					Log.e( "test", "SC:" + response.getStatusLine().getStatusCode() );
					BufferedReader reader = new BufferedReader( new InputStreamReader( response.getEntity()
							.getContent(), "UTF-8" ) );
					String s = "", temp; // TODO use SB
					while( ( temp = reader.readLine() ) != null )
					{
						s += temp;
					}
					if( pd != null && pd.isShowing() )
					{
						pd.dismiss();
					}
					if( s.contains( "success" ) ) // hammad?
					{
						successful = true;
						m_json = m_filePath = null;
						getActivity().getSupportFragmentManager().beginTransaction()
						.remove( RegistrationFragment.this ).add( R.id.container, new SuccessFragment() ).commit();
					}
					else
					{
						// TODO
					}
					Log.v( LOG_TAG, "Response: " + s );
				}
				catch( ClientProtocolException e )
				{
				}
				catch( IOException e )
				{
				}
				finally
				{
					if( listener != null )
						listener.onUploadFinished( successful );
				}
			}
		} );
		t.start();
	}

	private static interface RegistrationListener
	{
		public void onUploadFinished( boolean registrationSuccessful );
	}
}
